#include <iostream>
#include <fstream>
#include <sstream>

#include "exporter.h"
#include "lodepng.h"

exporter::exporter(mesh* p_msh) : p_mesh(p_msh) { }

// ---------------------------------------------

void exporter::export_mesh_VTK(const char* filename)
{
  cell* p_cell_now; // pointer to cell
  double x1now, x2now, x3now, x4now;
  double y1now, y2now, y3now, y4now;

  size_t n_cells = p_mesh->get_n_cells();

  std::ofstream fileVTK;
  fileVTK.open(filename, std::ios::trunc); // open the file (destroy if exists)
  if (fileVTK.is_open() == 1) // file correctly initialized
  { 
    // writing VTK stuff
    fileVTK << "# vtk DataFile Version 2.0\n";
    fileVTK << "Generated by VTKer\n";
    fileVTK << "ASCII\n";
    fileVTK << "DATASET UNSTRUCTURED_GRID\n";
    fileVTK << "POINTS " << 4*n_cells << " float\n";
    for(int ii = 0; ii < n_cells; ii++)
    {
      p_cell_now = &(p_mesh->cells.at(ii));
      x1now = p_cell_now->XYZcorners[0];
      x2now = p_cell_now->XYZcorners[1];
      x3now = p_cell_now->XYZcorners[1];
      x4now = p_cell_now->XYZcorners[0];
  
      y1now = p_cell_now->XYZcorners[2];
      y2now = p_cell_now->XYZcorners[2];
      y3now = p_cell_now->XYZcorners[3];
      y4now = p_cell_now->XYZcorners[3];
  
      fileVTK << x1now << " " << y1now << " 0   ";
      fileVTK << x2now << " " << y2now << " 0   ";
      fileVTK << x3now << " " << y3now << " 0   ";
      fileVTK << x4now << " " << y4now << " 0   ";
      fileVTK << "\n";
    }
  
    fileVTK << "\n";
    fileVTK << "CELLS " << n_cells << " " << 5*n_cells << "\n";
    for(int ii = 0; ii < n_cells; ii++)
    {
      fileVTK << "4 ";
      fileVTK << 0 + 4*ii << " ";
      fileVTK << 1 + 4*ii << " ";
      fileVTK << 2 + 4*ii << " ";
      fileVTK << 3 + 4*ii << " ";
      fileVTK << "\n";
    }
  
    fileVTK << "\n";
    fileVTK << "CELL_TYPES " << n_cells << "\n";
    for(int ii = 0; ii < n_cells; ii++)
    {
      fileVTK << "9\n";
    }
  
    // Closing VTK file
    fileVTK.close();
  } 
  else { 
    std::cout << " There was an error opening file! In export_mesh_VTK()\n";
  }
}

// ---------------------------------------------

void exporter::export_partpercell_VTK(const char* filename)
{
  // 1) create a mesh file with a certain name, using the function export_mesh_VTK()
  export_mesh_VTK(filename);

  // 2) open this file again in append mode and add the required field (particles 
  // per cell in this case)
  std::ofstream fileVTK;
  fileVTK.open(filename, std::ios::app); // open the file (destroy if exists)

  size_t n_particles;

  // Write stuff
  fileVTK << "\n";
  fileVTK << "POINT_DATA " << 4*p_mesh->get_n_cells() << "\n";
  fileVTK << "SCALARS particles_per_cell float 1\n";
  fileVTK << "LOOKUP_TABLE default\n";
  for(size_t id_c=0; id_c<p_mesh->get_n_cells(); ++id_c)
  {
    n_particles = p_mesh->cells.at(id_c).particles.size();
    fileVTK << n_particles <<" "<< n_particles 
            <<" "<< n_particles <<" "<< n_particles <<"\n";
  }

  // Closing VTK file
  fileVTK.close();
} 

// ---------------------------------------------

void exporter::plot_particles_PNG(const char* filename)
{
  // Plots the particles on a PNG image, using lodepng

  // Parameters for image
  const unsigned w = 51; // width  [pixel]
  const unsigned h = 51; // height [pixel]
  const unsigned b = 10;  // border [pixel]
 
  const unsigned w_nob = w - 2*b; // width without borders
  const unsigned h_nob = h - 2*b; // width without borders
  
  // Create image vector
  std::vector<unsigned char> image;
  image.resize(w*h*4);

  // Fill the image
  // there are 4 parameters for each pixel. The first one is upper-left and the second one
  // is at its right.
  // NEED FIRST OF ALL A FUNCTION THAT MAPS x_pixel, y_pixel to a position along the vector "image"
 
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
  // pos_absolute = x_pixel + y_pixel*h // MAYBE!!!!!!!!!!!!! <<<<<-------------------------------------
 
  image[0] = 0;
  image[1] = 255;
  image[2] = 0;
  image[3] = 255;

  image[8] = 0;
  image[9] = 255;
  image[10] = 0;
  image[11] = 255;


  // Encode and save the image
  std::vector<unsigned char> buffer;

  unsigned error = lodepng::encode(buffer, image, w, h);
  if(error) {
    std::cout << "encoder error " << error << ": "<< lodepng_error_text(error) << std::endl;
  }

  lodepng::save_file(buffer, filename);

}
